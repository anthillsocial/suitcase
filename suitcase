#!/usr/bin/python2
from GertbotMotorController import *
from PitchDetector import * 
import sys, time, threading, termios, tty

class Suitcase:
    
    def __init__(self): 
        # Motor control object
        threading.Thread(target=self.startmotor).start()
        time.sleep(5)
        # Pitch detection object: pass a callback function
        threading.Thread(target=self.startpitch).start()
        # Wait for keyboard command
        #threading.Thread(target=self.startkeys).start()
    
    def startpitch(self):
        self.lastcommand = ''
        self.pd = PitchDetector(self.controls)

    def startmotor(self):
        self.mc = GertbotMotorController()
        self.mc.reset()
        
    # Callback function which is called whenever a new pitch is found 
    def controls(self, frequency, energy):
        pitch = round(frequency)
        energy = round(energy)
        if energy <= 200:
            return
        sens = 30 # sensitivity
        action = False
        if self.inrange(pitch, 300, sens): action = 'forward'
        elif self.inrange(pitch, 400, sens): action = 'reverse' 
        elif self.inrange(pitch, 600, sens): action = 'stop'
        elif self.inrange(pitch, 700, sens): action = 'reset'
        #elif self.inrange(pitch, 800, sens): action = 'g'
        #elif self.inrange(pitch, 900, sens): action = 'h'
        if action and self.lastcommand != action:
            print('{} | pitch:{} energy:{} action:{} last:{}\n'.format(action, pitch, energy, action, self.lastcommand))
            self.setmotor(action)
        self.lastcommand = action

    def setmotor(self, action):
        if(action=='forward'): self.mc.forward()
        if(action=='reverse'): self.mc.reverse()
        if(action=='stop'): self.mc.stop()
        if(action=='reset'): self.mc.reset()
    
    def startkeys(self):
        print('Start keys')
        while True:
            char = self.getch()
            if(char == "x"): self.setmotor('forward')
            if(char == "z"): self.setmotor('reverse')
            if(char == "c"): self.setmotor('stop')
            if(char == "v"): self.setmotor('reset')
            if(char == "q"): break
            char = ""
            time.sleep(0.01)
        exit()
    
    # Is this pitch within a certain range
    def inrange(self, pitch, target, sens):
        if pitch<=target+sens and pitch>=target-sens:return True
        else: return False
    
    # Grab output from the commandline
    def getch(self):
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch



if __name__ == "__main__": 
    suitcase = Suitcase()
 
